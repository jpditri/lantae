#!/usr/bin/env node
/**
 * Basic LSP Server Test
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs-extra');

async function testLSPBasic() {
  console.log('🔌 Testing Lantae LSP Server Basic Functionality\n');
  
  let server = null;
  let testPassed = 0;
  let testFailed = 0;
  
  try {
    // Create a test file with Lantae content
    const testDir = path.join(__dirname, 'test-lsp-basic');
    await fs.ensureDir(testDir);
    process.chdir(testDir);
    
    await fs.writeFile('test.py', '# Generated by Lantae AI v1.0.0\nprint("Hello World")');
    await fs.writeFile('.lantae-generated.json', JSON.stringify({
      files: ['test.py'],
      snippets: {
        'test.py': {
          tool: 'create_file',
          language: 'python',
          timestamp: new Date().toISOString()
        }
      }
    }, null, 2));
    
    console.log('1. Starting LSP server...');
    const serverPath = path.join(__dirname, 'lsp-server.js');
    server = spawn('node', [serverPath, '--stdio'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    // Wait for server to start
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    let messageBuffer = '';
    let responses = [];
    
    server.stdout.on('data', (data) => {
      messageBuffer += data.toString();
      
      // Parse LSP messages
      while (messageBuffer.includes('\r\n\r\n')) {
        const headerEnd = messageBuffer.indexOf('\r\n\r\n');
        const header = messageBuffer.substring(0, headerEnd);
        const contentLengthMatch = header.match(/Content-Length: (\d+)/);
        
        if (contentLengthMatch) {
          const contentLength = parseInt(contentLengthMatch[1]);
          const messageStart = headerEnd + 4;
          
          if (messageBuffer.length >= messageStart + contentLength) {
            const messageBody = messageBuffer.substring(messageStart, messageStart + contentLength);
            messageBuffer = messageBuffer.substring(messageStart + contentLength);
            
            try {
              const message = JSON.parse(messageBody);
              responses.push(message);
            } catch (e) {
              console.log('Failed to parse message:', e.message);
            }
          } else {
            break;
          }
        } else {
          messageBuffer = messageBuffer.substring(headerEnd + 4);
        }
      }
    });
    
    server.stderr.on('data', (data) => {
      console.log('Server stderr:', data.toString());
    });
    
    console.log('2. Testing server initialization...');
    
    // Send initialize request
    const initRequest = {
      jsonrpc: '2.0',
      id: 1,
      method: 'initialize',
      params: {
        processId: process.pid,
        capabilities: {
          textDocument: {
            completion: { dynamicRegistration: true },
            hover: { dynamicRegistration: true }
          }
        },
        workspaceFolders: [{
          uri: `file://${testDir}`,
          name: 'Test'
        }]
      }
    };
    
    sendLSPMessage(server, initRequest);
    
    // Wait for response
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const initResponse = responses.find(msg => msg.id === 1);
    if (initResponse && initResponse.result) {
      console.log('  ✅ LSP server initialized successfully');
      testPassed++;
    } else {
      console.log('  ❌ LSP server initialization failed');
      testFailed++;
    }
    
    // Send initialized notification
    sendLSPMessage(server, {
      jsonrpc: '2.0',
      method: 'initialized',
      params: {}
    });
    
    console.log('3. Testing document features...');
    
    // Open document
    sendLSPMessage(server, {
      jsonrpc: '2.0',
      method: 'textDocument/didOpen',
      params: {
        textDocument: {
          uri: 'file:///test.py',
          languageId: 'python',
          version: 1,
          text: '# Generated by Lantae AI v1.0.0\nprint("Hello World")'
        }
      }
    });
    
    // Test completion
    sendLSPMessage(server, {
      jsonrpc: '2.0',
      id: 2,
      method: 'textDocument/completion',
      params: {
        textDocument: { uri: 'file:///test.py' },
        position: { line: 1, character: 0 }
      }
    });
    
    // Wait for response
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const completionResponse = responses.find(msg => msg.id === 2);
    if (completionResponse) {
      console.log('  ✅ Completion request responded');
      testPassed++;
    } else {
      console.log('  ❌ Completion request failed');
      testFailed++;
    }
    
    console.log('4. Server capabilities check...');
    if (initResponse && initResponse.result && initResponse.result.capabilities) {
      const caps = initResponse.result.capabilities;
      if (caps.completionProvider && caps.hoverProvider) {
        console.log('  ✅ Server has required capabilities');
        testPassed++;
      } else {
        console.log('  ❌ Server missing capabilities');
        testFailed++;
      }
    }
    
    console.log(`\n📊 LSP Basic Test Results:`);
    console.log(`✅ Passed: ${testPassed}`);
    console.log(`❌ Failed: ${testFailed}`);
    
    if (testFailed === 0) {
      console.log('\n🎉 LSP server is working correctly!');
      return true;
    } else {
      console.log('\n⚠️  Some LSP tests failed.');
      return false;
    }
    
  } catch (error) {
    console.error('LSP test failed:', error.message);
    return false;
  } finally {
    if (server) {
      server.kill();
    }
    process.chdir(__dirname);
  }
}

function sendLSPMessage(server, message) {
  const jsonMessage = JSON.stringify(message);
  const header = `Content-Length: ${Buffer.byteLength(jsonMessage)}\r\n\r\n`;
  server.stdin.write(header + jsonMessage);
}

if (require.main === module) {
  testLSPBasic().then(success => {
    process.exit(success ? 0 : 1);
  });
}

module.exports = testLSPBasic;