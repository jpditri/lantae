[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "lantae"
version = "1.0.0"
description = "Python implementation of Lantae - Multi-Provider LLM Interface"
authors = ["Lantae Contributors"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/jpditri/lantae-cli"
repository = "https://github.com/jpditri/lantae-cli"
documentation = "https://github.com/jpditri/lantae-cli#readme"
keywords = ["ai", "llm", "cli", "openai", "anthropic", "ollama", "python"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1.0"
rich = "^13.0.0"
httpx = "^0.27.0"
pydantic = "^2.5.0"
pyyaml = "^6.0"
python-dotenv = "^1.0.0"
prompt-toolkit = "^3.0.0"
asyncio-mqtt = {version = "^0.16.0", optional = true}
pandas = {version = "^2.0.0", optional = true}
numpy = {version = "^1.24.0", optional = true}
jupyter = {version = "^1.0.0", optional = true}

[tool.poetry.extras]
data = ["pandas", "numpy"]
jupyter = ["jupyter", "pandas", "numpy"]
mqtt = ["asyncio-mqtt"]
all = ["pandas", "numpy", "jupyter", "asyncio-mqtt"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
sphinx = "^7.1.0"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.scripts]
lantae = "lantae.cli.main:main"

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "httpx.*",
    "rich.*",
    "prompt_toolkit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/lantae",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/lantae"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]