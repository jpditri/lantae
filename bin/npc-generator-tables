#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'json'

require_relative '../lib/ruby/procedural/smart_randomizer'
require_relative '../lib/ruby/procedural/template_engine'
require_relative '../lib/ruby/procedural/content_pools'
require_relative '../lib/ruby/procedural/campaign_context'

class NPCGenerator
  def initialize(campaign_path: nil)
    @campaign_context = Procedural::CampaignContext.new(campaign_path: campaign_path)
    @pools = Procedural::ContentPools.new(campaign_path: campaign_path)
    @template_engine = Procedural::TemplateEngine.new(campaign_path: campaign_path)
    
    load_tables
    load_templates
  end
  
  def generate(options = {})
    npc = {
      name: generate_name(options[:culture]),
      profession: select_profession(options[:profession_type]),
      personality: generate_personality,
      motivation: generate_motivation,
      appearance: generate_appearance,
      voice: generate_voice,
      quirk: select_quirk,
      secret: options[:include_secret] ? generate_secret : nil,
      current_activity: generate_current_activity
    }.compact
    
    if options[:use_campaign_context]
      enrich_with_campaign_context(npc)
    end
    
    if options[:generate_connections]
      npc[:connections] = @campaign_context.suggest_connections(npc[:name], :npc)
    end
    
    if options[:detailed]
      add_detailed_information(npc)
    end
    
    npc
  end
  
  def generate_batch(count, options = {})
    count.times.map { generate(options) }
  end
  
  private
  
  def load_tables
    @professions = YAML.load_file('data/tables/npc/professions.yml')
    @personalities = YAML.load_file('data/tables/npc/personalities.yml')
    @motivations = YAML.load_file('data/tables/npc/motivations.yml')
    
    @profession_pool = Procedural::SmartRandomizer.new(
      flatten_professions,
      memory_size: 5
    )
    
    @trait_pool = Procedural::SmartRandomizer.new(
      flatten_traits,
      memory_size: 10
    )
  end
  
  def load_templates
    @template_engine.load_word_bank('ADJECTIVE', %w[
      weathered youthful scarred elegant disheveled proud weary
      mysterious cheerful gruff refined nervous confident
    ])
    
    @template_engine.load_word_bank('BUILD', %w[
      lean muscular stocky slender robust wiry athletic
      frail imposing average compact hulking delicate
    ])
    
    @template_engine.load_template('appearance', 
      "A [ADJECTIVE] figure with a [BUILD] build"
    )
    
    @template_engine.load_template('voice',
      "Speaks with a [VOICE_QUALITY] voice, often [SPEECH_PATTERN]"
    )
    
    @template_engine.load_word_bank('VOICE_QUALITY', %w[
      gravelly melodious nasal booming whispered accented
      refined crude warm cold measured excited
    ])
    
    @template_engine.load_word_bank('SPEECH_PATTERN', %w[
      pausing\ mid-sentence using\ long\ words gesturing\ wildly
      speaking\ rapidly choosing\ words\ carefully laughing\ nervously
      clearing\ throat repeating\ phrases trailing\ off
    ])
  end
  
  def flatten_professions
    professions = []
    @professions.each do |rarity, list|
      weight = case rarity
               when 'common' then 3.0
               when 'uncommon' then 1.5
               when 'rare' then 0.5
               else 1.0
               end
      
      list.each do |prof|
        professions << {
          name: prof['name'],
          tags: prof['tags'],
          locations: prof['typical_locations'],
          income: prof['income'],
          weight: weight,
          rarity: rarity
        }
      end
    end
    professions
  end
  
  def flatten_traits
    traits = []
    
    @personalities.each do |category, list|
      next if category == 'quirks'
      
      list.each do |trait|
        traits << {
          name: trait['name'],
          category: category,
          opposites: trait['opposites'] || [],
          roleplay: trait['roleplay_hints'] || []
        }
      end
    end
    
    traits
  end
  
  def generate_name(culture = nil)
    first_names = %w[
      Aldric Brenna Cedric Dara Ewan Freya Gareth Hilda
      Ivan Jora Kael Lyra Magnus Nora Osric Petra
      Quinn Rhea Soren Tara Ulric Vera Willem Xara
      Yorick Zara
    ]
    
    last_names = %w[
      Ironforge Stormwind Brightblade Shadowmere Goldleaf
      Riverstone Flameheart Frostborn Moonwhisper Starweaver
      Thornfield Windwalker Stonefist Silverstream Nightfall
    ]
    
    "#{first_names.sample} #{last_names.sample}"
  end
  
  def select_profession(type = nil)
    context = type ? { rarity: type } : {}
    prof = @profession_pool.next(context: context)
    
    {
      title: prof[:name],
      tags: prof[:tags],
      typical_locations: prof[:locations],
      income_level: prof[:income]
    }
  end
  
  def generate_personality
    traits = []
    
    traits << @trait_pool.next(context: { category: 'positive_traits' })
    
    if rand < 0.7
      traits << @trait_pool.next(context: { category: 'negative_traits' })
    end
    
    if rand < 0.5
      traits << @trait_pool.next(context: { category: 'neutral_traits' })
    end
    
    {
      primary_traits: traits.map { |t| t[:name] },
      roleplay_hints: traits.flat_map { |t| t[:roleplay] }.sample(2)
    }
  end
  
  def generate_motivation
    goal_type = @motivations.keys.sample
    goal_category = @motivations[goal_type].keys.sample
    goals = @motivations[goal_type][goal_category]
    
    primary_goal = goals.sample
    
    fear_category = @motivations['fears'].keys.sample
    fear = @motivations['fears'][fear_category].sample
    
    {
      goal: primary_goal,
      goal_type: "#{goal_type}/#{goal_category}",
      fear: fear,
      fear_type: fear_category
    }
  end
  
  def generate_appearance
    @template_engine.generate('appearance')
  end
  
  def generate_voice
    @template_engine.generate('voice')
  end
  
  def select_quirk
    @personalities['quirks'].sample
  end
  
  def generate_secret
    secret_type = @motivations['secrets'].keys.sample
    secret_options = @motivations['secrets'][secret_type]
    
    {
      type: secret_type,
      detail: secret_options.sample
    }
  end
  
  def generate_current_activity
    activities = [
      "looking for work",
      "drinking alone",
      "arguing with someone",
      "reading a letter",
      "counting coins",
      "repairing equipment",
      "eating a meal",
      "watching the crowd",
      "sleeping in corner",
      "playing dice",
      "writing in journal",
      "sharpening blade"
    ]
    
    activities.sample
  end
  
  def enrich_with_campaign_context(npc)
    campaign_npcs = @campaign_context.get_context_for(:npcs)
    
    if campaign_npcs.any?
      if rand < 0.3
        related_npc = campaign_npcs.keys.sample
        npc[:connections] ||= []
        npc[:connections] << {
          entity: related_npc,
          relationship: ['friend', 'rival', 'family', 'employee', 'mentor'].sample
        }
      end
    end
    
    campaign_events = @campaign_context.data[:events]
    if campaign_events.any? && rand < 0.2
      event = campaign_events.last
      npc[:knowledge] = "Knows about: #{event[:description]}"
    end
    
    npc
  end
  
  def add_detailed_information(npc)
    npc[:background] = generate_background(npc)
    npc[:relationships] = generate_relationships(npc)
    npc[:possessions] = generate_possessions(npc)
    npc[:combat_info] = generate_combat_info(npc) if includes_combat_profession?(npc)
    npc
  end
  
  def generate_background(npc)
    elements = []
    
    elements << "Originally from #{['the north', 'a distant land', 'this very town', 'the countryside'].sample}"
    
    if npc[:profession][:income_level] == 'low'
      elements << "struggling to make ends meet"
    elsif npc[:profession][:income_level] == 'high'
      elements << "quite successful in their trade"
    end
    
    if npc[:motivation][:goal_type].include?('redemption')
      elements << "seeking to make amends for past mistakes"
    end
    
    elements.join(", ")
  end
  
  def generate_relationships(npc)
    relationships = {}
    
    if rand < 0.7
      relationships[:family] = ['spouse', 'children', 'elderly parent', 'siblings'].sample
    end
    
    if rand < 0.5
      relationships[:professional] = ['apprentice', 'master', 'rival', 'partner'].sample
    end
    
    relationships
  end
  
  def generate_possessions(npc)
    standard = ['coin purse', 'work tools', 'simple clothes']
    
    special = case npc[:profession][:title]
              when 'Merchant'
                ['ledger', 'scale', 'sample goods']
              when 'Guard'
                ['badge', 'whistle', 'manacles']
              when 'Priest'
                ['holy symbol', 'prayer book', 'incense']
              else
                ['treasured item', 'letter', 'small weapon']
              end
    
    standard + special.sample(1)
  end
  
  def generate_combat_info(npc)
    {
      skill_level: ['novice', 'competent', 'expert'].sample,
      preferred_weapon: ['sword', 'spear', 'bow', 'dagger'].sample,
      armor: ['none', 'leather', 'chain', 'plate'].sample
    }
  end
  
  def includes_combat_profession?(npc)
    combat_professions = ['Guard', 'Soldier', 'Mercenary', 'Assassin']
    combat_professions.include?(npc[:profession][:title])
  end
  
  def format_output(npc, format)
    case format
    when 'json'
      JSON.pretty_generate(npc)
    when 'yaml'
      npc.to_yaml
    when 'text'
      format_text_output(npc)
    else
      npc.inspect
    end
  end
  
  def format_text_output(npc)
    output = []
    output << "=== #{npc[:name]} ==="
    output << "#{npc[:profession][:title]}"
    output << ""
    output << "Appearance: #{npc[:appearance]}"
    output << "Voice: #{npc[:voice]}"
    output << "Personality: #{npc[:personality][:primary_traits].join(', ')}"
    output << "Quirk: #{npc[:quirk]}"
    output << ""
    output << "Currently: #{npc[:current_activity]}"
    output << "Motivation: #{npc[:motivation][:goal]}"
    output << "Fear: #{npc[:motivation][:fear]}"
    
    if npc[:secret]
      output << ""
      output << "Secret (#{npc[:secret][:type]}): #{npc[:secret][:detail]}"
    end
    
    if npc[:connections]&.any?
      output << ""
      output << "Connections:"
      npc[:connections].each do |conn|
        output << "  - #{conn[:relationship]} of #{conn[:entity]}"
      end
    end
    
    if npc[:personality][:roleplay_hints]&.any?
      output << ""
      output << "Roleplay hints:"
      npc[:personality][:roleplay_hints].each do |hint|
        output << "  - #{hint}"
      end
    end
    
    output.join("\n")
  end
end

options = {
  count: 1,
  format: 'text',
  use_campaign_context: false,
  generate_connections: false,
  include_secret: false,
  detailed: false
}

OptionParser.new do |opts|
  opts.banner = "Usage: npc-generator-tables [options]"
  
  opts.on("-n", "--count COUNT", Integer, "Number of NPCs to generate") do |n|
    options[:count] = n
  end
  
  opts.on("-f", "--format FORMAT", "Output format (text, json, yaml)") do |f|
    options[:format] = f
  end
  
  opts.on("-c", "--campaign PATH", "Campaign directory for context") do |path|
    options[:campaign_path] = path
    options[:use_campaign_context] = true
  end
  
  opts.on("-t", "--type TYPE", "Profession type (common, uncommon, rare)") do |t|
    options[:profession_type] = t
  end
  
  opts.on("--connections", "Generate connections to campaign") do
    options[:generate_connections] = true
  end
  
  opts.on("--secret", "Include a secret") do
    options[:include_secret] = true
  end
  
  opts.on("--detailed", "Generate detailed information") do
    options[:detailed] = true
  end
  
  opts.on("-h", "--help", "Show this help") do
    puts opts
    exit
  end
end.parse!

generator = NPCGenerator.new(campaign_path: options[:campaign_path])

if options[:count] == 1
  npc = generator.generate(options)
  puts generator.send(:format_output, npc, options[:format])
else
  npcs = generator.generate_batch(options[:count], options)
  
  case options[:format]
  when 'json'
    puts JSON.pretty_generate(npcs)
  when 'yaml'
    puts npcs.to_yaml
  else
    npcs.each_with_index do |npc, i|
      puts generator.send(:format_output, npc, 'text')
      puts "\n---\n\n" if i < npcs.length - 1
    end
  end
end