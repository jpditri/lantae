require 'spec_helper'
require_relative '../../lib/ruby/lsp/client'
require_relative '../../lib/ruby/lsp/server'

RSpec.describe 'LSP Integration', :integration do
  let(:server_path) { File.join(Dir.pwd, 'bin', 'lantae-lsp') }
  let(:test_file_path) { File.join(Dir.tmpdir, 'test_lsp.rb') }
  let(:test_content) do
    <<~RUBY
      # Generated by Lantae AI v1.0.0
      def fibonacci(n)
        return n if n <= 1
        fibonacci(n - 1) + fibonacci(n - 2)
      end
    RUBY
  end

  before do
    File.write(test_file_path, test_content)
  end

  after do
    File.delete(test_file_path) if File.exist?(test_file_path)
  end

  describe 'LSP Client-Server Communication' do
    let(:client) { Lantae::LSP::Client.new(['ruby', server_path]) }

    before do
      skip "LSP server not found" unless File.exist?(server_path)
    end

    it 'starts and initializes the LSP server' do
      expect(client.start).to be true
      expect(client.capabilities).to include('textDocumentSync')
      
      client.stop
    end

    it 'opens and analyzes a file' do
      client.start
      
      # Open file
      client.open_file(test_file_path, test_content, 'ruby')
      
      # Get hover information
      hover = client.get_hover(test_file_path, 1, 5) # hover over 'fibonacci'
      expect(hover).not_to be_nil
      
      client.stop
    end

    it 'provides code completions' do
      client.start
      
      client.open_file(test_file_path, test_content, 'ruby')
      
      # Get completions
      completions = client.get_completions(test_file_path, 2, 0)
      expect(completions).to be_an(Array)
      
      # Should include AI completions for Lantae files
      ai_completions = completions.select { |c| c['label'].include?('Lantae') }
      expect(ai_completions).not_to be_empty
      
      client.stop
    end

    it 'provides code actions for Lantae-generated files' do
      client.start
      
      client.open_file(test_file_path, test_content, 'ruby')
      
      # Get code actions for the whole function
      actions = client.get_code_actions(test_file_path, 1, 0, 4, 3)
      expect(actions).to be_an(Array)
      
      # Should include AI-powered actions
      ai_actions = actions.select { |a| a['title'].include?('AI') || a['title'].include?('🤖') }
      expect(ai_actions).not_to be_empty
      
      # Should have refactor, optimize, test generation actions
      action_titles = actions.map { |a| a['title'] }
      expect(action_titles).to include(match(/refactor/i))
      expect(action_titles).to include(match(/optimize/i))
      expect(action_titles).to include(match(/test/i))
      
      client.stop
    end

    it 'formats documents' do
      client.start
      
      unformatted_code = "def test\n  puts 'hello'\n    end"
      unformatted_file = File.join(Dir.tmpdir, 'unformatted.rb')
      File.write(unformatted_file, unformatted_code)
      
      client.open_file(unformatted_file, unformatted_code, 'ruby')
      
      # Format document
      edits = client.format_document(unformatted_file)
      expect(edits).to be_an(Array)
      
      File.delete(unformatted_file) if File.exist?(unformatted_file)
      client.stop
    end
  end

  describe 'LSP Server Standalone' do
    it 'handles initialize request' do
      input = StringIO.new
      output = StringIO.new
      error = StringIO.new
      
      server = Lantae::LSP::Server.new(input, output, error)
      
      # Create initialize request
      request = {
        jsonrpc: '2.0',
        id: 1,
        method: 'initialize',
        params: {
          processId: Process.pid,
          capabilities: {}
        }
      }
      
      message = JSON.generate(request)
      input.string = "Content-Length: #{message.bytesize}\r\n\r\n#{message}"
      input.rewind
      
      # Process one message
      server.send(:handle_message)
      
      # Check response
      output.rewind
      response_data = output.read
      
      expect(response_data).to include('Content-Length:')
      
      # Parse response
      if response_data =~ /Content-Length: (\d+)\r\n\r\n(.+)/m
        content_length = $1.to_i
        content = $2
        
        response = JSON.parse(content)
        expect(response['result']['capabilities']).to include('textDocumentSync')
        expect(response['result']['capabilities']).to include('completionProvider')
        expect(response['result']['capabilities']).to include('codeActionProvider')
      end
    end
  end

  describe 'File Integration' do
    it 'tracks Lantae-generated files' do
      client = Lantae::LSP::Client.new
      client.start
      
      # Create a new file through Lantae
      lantae_file = File.join(Dir.tmpdir, 'lantae_generated.py')
      lantae_content = <<~PYTHON
        # Generated by Lantae AI v1.0.0 - #{Time.now.iso8601}
        # Context: {"tool":"create_file","timestamp":"#{Time.now.iso8601}"}
        
        def hello_world():
            print("Hello from Lantae!")
      PYTHON
      
      File.write(lantae_file, lantae_content)
      client.open_file(lantae_file, lantae_content, 'python')
      
      # Should provide AI actions
      actions = client.get_code_actions(lantae_file, 3, 0, 4, 30)
      ai_actions = actions.select { |a| 
        a['title'].include?('🤖') || a['title'].include?('🚀') || 
        a['title'].include?('🧪') || a['title'].include?('📝') || 
        a['title'].include?('🔍')
      }
      expect(ai_actions.size).to be >= 4 # refactor, optimize, test, docs
      
      File.delete(lantae_file) if File.exist?(lantae_file)
      client.stop
    end
  end
end